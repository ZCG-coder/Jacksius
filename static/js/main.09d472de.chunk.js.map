{"version":3,"sources":["components/Jacksius.tsx","reportWebVitals.ts","index.tsx"],"names":["Jacksius","temperature","$","css","window","height","this","loadJacksius","then","on","onResize","id","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","text","open","send","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"6QAIaA,EAAQ,iKAMgB,OANhB,oCAMTC,YAAsB,GAAE,EAyB/B,OAzB+B,qCAEhC,WACIC,IAAE,gBAAgBC,IAAI,CAAC,YAAY,GAAD,QAAMD,IAAEE,QAAQC,UAAY,KAAO,EAAC,OAC1E,GAAC,oBAED,WAII,OAHAC,KAAKC,eAAeC,OAEpBN,IAAEE,QAAQK,GAAG,SAAUH,KAAKI,UACrB,mBAAGC,GAAI,cAAc,gBAChC,GAAC,2EAED,uGACUC,EAAU,IAAIC,eAChBZ,EAAsB,GAC1BW,EAAQE,mBAAqB,WACE,IAAvBF,EAAQG,YAAuC,MAAnBH,EAAQI,SACpCf,EAAcW,EAAQK,aACtBf,IAAE,gBAAgBgB,KAAK,GAAD,OAAIjB,EAAW,UACrC,EAAKS,WAEb,EACAE,EAAQO,KAAK,MAAO,kFAAkF,GACtGP,EAAQQ,KAAK,MAAM,2CACtB,kDAdA,MAcA,EA/BgB,CAASC,IAAMC,WCUrBC,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBjB,MAAK,YAAgD,IAA9CkB,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QACxDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACZ,GAER,ECNaO,IAASC,WAClBC,SAASC,eAAe,aAEvBC,OACD,cAAC,IAAMC,WAAU,UACb,cAAC,EAAQ,OAOjBb,G","file":"static/js/main.09d472de.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Jacksius.sass\";\nimport $ from \"jquery\";\n\nexport class Jacksius extends React.Component<any, any> {\n    /**\n     * Gets the temperature in Jacksius from MEGA.io\n     * @private\n     */\n\n    private temperature: string = \"\";\n\n    onResize() {\n        $(\"#temperature\").css({\"font-size\": `${($(window).height() || 100) / 3}px`});\n    }\n\n    render() {\n        this.loadJacksius().then();\n\n        $(window).on(\"resize\", this.onResize);\n        return <p id={\"temperature\"}>...</p>;\n    }\n\n    private async loadJacksius() {\n        const xmlHttp = new XMLHttpRequest();\n        let temperature: string = \"\";\n        xmlHttp.onreadystatechange = () => {\n            if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {\n                temperature = xmlHttp.responseText;\n                $(\"#temperature\").text(`${temperature}Â°J`);\n                this.onResize();\n            }\n        };\n        xmlHttp.open(\"GET\", \"https://cors-anywhere.herokuapp.com/https://pst.klgrth.io/paste/ystsq/download\", true); // true for asynchronous\n        xmlHttp.send(null);\n    }\n}\n","import {ReportHandler} from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.sass\";\nimport {Jacksius} from \"./components/Jacksius\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(\n    document.getElementById(\"jacksius\") as HTMLElement\n);\nroot.render(\n    <React.StrictMode>\n        <Jacksius/>\n    </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}